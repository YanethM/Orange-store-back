generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int        @id @default(autoincrement())
  fullname                   String
  identification             String     @unique
  cod_cost_center            String?
  cost_center                String?
  position                   String?
  company                    String?
  division                   String?
  payment_city               String?
  associeted_vice_presidency String?
  vice_presidency            String?
  email                      String     @unique
  password                   String
  avatar                     String?
  role                       String     @default("user")
  resetPasswordToken         String?
  resetPasswordExpires       DateTime?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  Delivery                   Delivery[]
  Order                      Orders[]
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  price       Float
  description String
  stock       Int?
  color       String?
  images      String
  background  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orders      OrderProduct[]
  sizes       Size[]
}

model Size {
  id           Int            @id @default(autoincrement())
  sizeName     String
  stock        Int
  productId    Int
  product      Product        @relation(fields: [productId], references: [id])
  gender       String?
  OrderProduct OrderProduct[]
}

model Orders {
  id        Int            @id @default(autoincrement())
  userId    Int
  total     Float
  isPaid    Boolean        @default(false)
  gender    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Delivery  Delivery[]
  products  OrderProduct[]
  user      User           @relation(fields: [userId], references: [id])

  @@index([userId], map: "Orders_userId_fkey")
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  sizeId    Int? // Campo opcional para la talla
  gender    String? // Añadir el campo de género al OrderProduct
  order     Orders  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  size      Size?   @relation(fields: [sizeId], references: [id]) // Relación con Size

  @@index([orderId], map: "OrderProduct_orderId_fkey")
  @@index([productId], map: "OrderProduct_productId_fkey")
}

model Delivery {
  id        Int      @id @default(autoincrement())
  city      String
  office    String
  orderId   Int
  userId    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Orders   @relation(fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([orderId], map: "Delivery_orderId_fkey")
  @@index([userId], map: "Delivery_userId_fkey")
}

model Faq {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  position  Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
